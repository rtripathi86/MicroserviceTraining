https://github.com/eswaribala/rpsboa_sep_19.git
my git repo :
https://github.com/rtripathi86/openshifttest

--Server
mongod --dbpath="<filepath>"

--client
mongo
show dbs

API Gateway:
apigee

Zuul-- Spring Boot Gate way
Eureka -- Service Registration and Discovery

Kubernates
docker
openshift
zitter

rabit mq[event coriographi , messaging quue]
To open rabitmq ui : Go path C:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.18\sbin
>>rabbitmq-plugins enable rabbitmq_management
guest,guest

zipkin:monitor process
docker run -d -p 9411:9411 openzipkin/zipkin

hystrix:
hystric dashboard/hystrix
cercuit breaker
hateos


Note: Kafka, MQ,AZZure

#docker commands
>docker -machine url
>docker images
>docker container ls -a
>docker logs <containerid>
>docker-machine url
tcp://192.168.99.100:2376

docker:
-----------------------------------------------------------------------------------------
#Execute java app
mvn clean install -DskipTests

#mysql container
#docker run --name boa-mysql -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=boamumbaidb -e MYSQL_USER=demo_user -e MYSQL_PASSWORD=demo_pass -d mysql

docker run --name boa-mysql -e MYSQL_ROOT_PASSWORD=rootpwd -e MYSQL_DATABASE=boamumbaidb -e MYSQL_USER=demo_user -e MYSQL_PASSWORD=demo_pass -d mysql

#execute mysql container
docker exec -it boa-mysql mysql -u demo_user -p

##Copy docker file in project and then run below command in project root directory to generate image:
docker build -f dockerfile -t kycmumbai-app-image .

#Execute image as app
docker run -h 192.168.99.100 -p 7090:6060 --name kyccontainernew --link boa-mysql:mysql -d kycmumbai-app-image

----------------------------------------------------------------------------------------

copy docker compose file docker-composer.yml in project root directory and run below-
docker-compose up



docker hub:
docker tag kycmumbai-app-image:latest rtripathi86/kycapplication:v2
docker push rtripathi86/kycapplication:v2

docker tag ${imagename}:${tagname} <docker hub repo>:<vesrion>
docker push <docker hub repo>:${tagname}


#kubernate:

#Openshift

Do all the above steps via openshift:

1)create account in open shift and creat a instance there

2)down load OC installer and set the path ..> then execute from copy login command openshift:::::  oc login --token=HFwHXaGfJ6GwvggYEjlvrskGYGRXydOxtaPP6-C5ObA --server=https://api.us-west-1.starter.openshift-online.com:6443

3)Run below command
oc getpods
oc new-app -e MYSQL_USER=demo_user -e MYSQL_PASSWORD=demo_pass -e MYSQL_DATABASE=boamumbaidb -e MYSQL_ROOT_PASSWORD=rootpwd mysql --name=boa-mysql 

4)Upload the code on git SRC and pom.xml file and copy the path

5)open openshift and configure the git repository
#keep server.port=8080

#keep mysql url with ip address generated by openshift



docker-composer.yml:
--------------------------------------------------------------------------
version: '3'

services:
  mysql:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=boamumbaidb
      - MYSQL_USER=demo_user
      - MYSQL_PASSWORD=demo_pass
    volumes:
      - /data/mysql
  demo-app:
    image: repo/kycprocess-compose-app
    build:
      context: ./
      dockerfile: dockerfile
    depends_on:
      - mysql
    ports:
      - 7080:6060
    volumes:
      - /data/compose-app
--------------------------------------------------------------------------------

dockerfile
----------------------------------------------------------------------------------
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ADD target/kycprocess26092019-0.0.1-SNAPSHOT.jar kycprocessdocker-shortcut.jar
ENV JAVA_OPTS=""
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /kycprocessdocker-shortcut.jar" ]
----------------------------------------------------------------------------------


other commands
docker rm <containerid>
docker stop <containerid>
docker restart <containerid>

docker build      : image creation
docker run        : put in container with ip and port number\
docker pull       : pull image
docker push <dockerHubId>  :docker hub -client environement[OpenShift,AWS,Azure]

